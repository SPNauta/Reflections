1) What happens when you initialize a repository? Why do you need to do it?

When you initialize a repositroy a .git folder is created, which will hold all
the metadata about the files in the repostory, like the different commits.
You need to initialize a repository, to start storing the metadata. If git would
store the metadata for each directory, it would be way too much data.

2) How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is an inbetween phase between the working directory and the 
repository. You can select the files you want to commit by addin them to the 
staging area. And when you than commit only these files will be commited in the
repository. This step inbetween prevents for saving all the files every time in 
the repository, saving memory. It allows for a carefull selection of files to commit
and prevents saving files in the commit that are not related to the other files
or are not necessary to save.

3) How can you use the staging area to make sure you have one commit per logical
change?

You can use the staging area to select the files you want to commit changes to,
which enables you to prevent from saving unnecessary files in the commit again.
Furthermore, it easy to loop at the differences between the most recent commit and
the changes made to the files and stored in the staging area. By looking at these
differnces you can make sure that the changes you made are indeed one logical change.

4) What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

The creation of branches will be helpfull if you want to try out a change of which
you are not sure you want to keep it or it will work. By creating a branch for that
you can make the changes, but also work further on the original part. Branches can
help by keeping the overview of changes made per branche, where each branche has a
large change or experimental feature.

5) How do the diagrams help you visualize the branch structure?

Visualizing the branch structure in a diagram gives an great overview from all the
commits on the branches and thre reachbility of the different commits for each branch.
Furthermore, it shows the changes made in each branch, and therefore you can see
which changes are made in one branch but not another.

6) What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result of merging two branches together is a new version of the files in which
the changes of both branches are incoperated --> the changes made in both branches
are combined into the new version. It is represented in the diagram this way, 
because the new version had two parents, namely the last commits in both branches.

7) What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

One of the major pros of Git's automatic merging is that you don't have to go over
all the changes made in the different branches by hand. Git will merge most of the
changes by itself. Nevertheless, if there is a conflict you hava to change it manually
in the right file. Therefore, a con of Git's automatic merging is that conflicts may
occur. If you merge manually you will not have that problem, as you just apply all
the changes that are necessary.